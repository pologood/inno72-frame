spring.profiles.active=dev
spring.profiles.include=routes
spring.jmx.default-domain=zuul
server.port=9003

eureka.instance.metadata-map.cluster=yyxk

###\u8f6c\u53d1\u8bf7\u6c42\u4f7f\u7528okhttp\u5ba2\u6237\u7aef
ribbon.okhttp.enabled=true
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000
zuul.debug.request=true

eureka.region=default

###log4j2\u914d\u7f6e\u6587\u4ef6\u8def\u5f84
logging.config=classpath:log4j2.xml

turbine.appConfig=zuul, one
turbine.clusterNameExpression=metadata['cluster']
turbine.aggregator.clusterConfig=yyxk
#
#eureka.client.log-delta-diff=false
#Indicates whether to log differences between the eureka server and the eureka\n client in terms of registry information.\n\n Eureka client tries to retrieve only delta changes from eureka server to minimize\n network traffic. After receiving the deltas, eureka client reconciles the\n information from the server to verify it has not missed out some information.\n Reconciliation failures could happen when the client has had network issues\n communicating to server.If the reconciliation fails, eureka client gets the full\n registry information.\n\n While getting the full registry information, the eureka client can log the\n differences between the client and the server and this setting controls that.\n\n The changes are effective at runtime at the next registry fetch cycle as specified\n by registryFetchIntervalSecondsr 
#
eureka.shouldOnDemandUpdateStatusChange=false
eureka.client.onDemandUpdateStatusChange=false
#If set to true, local status updates via ApplicationInfoManager will trigger\n on-demand (but rate limited) register/updates to remote eureka servers 
#
eureka.client.preferSameZoneEureka=true
#Indicates whether or not this instance should try to use the eureka server in the\n same zone for latency and/or other reason.\n\n Ideally eureka clients are configured to talk to servers in the same zone\n\n The changes are effective at runtime at the next registry fetch cycle as specified\n by registryFetchIntervalSeconds 
#
#
#\u8868\u793aeureka client\u95f4\u9694\u591a\u4e45\u53bb\u62c9\u53d6\u670d\u52a1\u6ce8\u518c\u4fe1\u606f
eureka.client.registryFetchIntervalSeconds=3
#
#Eureka\u8fd0\u884c\u72b6\u51b5\u68c0\u67e5
eureka.client.healthcheck.enabled=true
eureka.instance.healthCheckUrl=/health
#Gets the absolute health check page URL for this instance. The users can provide\n the healthCheckUrlPath if the health check page resides in the same instance\n talking to eureka, else in the cases where the instance is a proxy for some other\n server, users can provide the full URL. If the full URL is provided it takes\n precedence.\n\n <p>\n It is normally used for making educated decisions based on the health of the\n instance - for example, it can be used to determine whether to proceed deployments\n to an entire farm or stop the deployments without causing further damage. The full\n URL should follow the format http://${eureka.hostname}:7001/ where the value\n ${eureka.hostname} is replaced at runtime. 
#
#
eureka.instance.instanceId=${spring.application.name}-${spring.cloud.client.ipAddress}:${server.port}
#Get the unique Id (within the scope of the appName) of this instance to be\n registered with eureka. 
#
###\u6ce8\u518c\u4e2d\u5fc3\u7aef\u9ed8\u8ba4\u591a\u5c11\u79d2\u6ca1\u6709\u6536\u5230client\u7aef\u5fc3\u8df3\u5c31\u8ba4\u4e3aclient\u5931\u6548\u4e86\uff0c\u5931\u6548\u540e\u4f1a\u5c06\u5bf9\u5e94client\u4ece\u6ce8\u518c\u4e2d\u5fc3\u79fb\u9664
eureka.instance.leaseExpirationDurationInSeconds=2
#Indicates the time in seconds that the eureka server waits since it received the\n last heartbeat before it can remove this instance from its view and there by\n disallowing traffic to this instance.\n\n Setting this value too long could mean that the traffic could be routed to the\n instance even though the instance is not alive. Setting this value too small could\n mean, the instance may be taken out of traffic because of temporary network\n glitches.This value to be set to atleast higher than the value specified in\n leaseRenewalIntervalInSeconds. 
#
###client\u591a\u5c11\u65f6\u95f4\u53d1\u9001\u5fc3\u8df3\u7ed9server\u6ce8\u518c\u4e2d\u5fc3
eureka.instance.leaseRenewalIntervalInSeconds=1
#Indicates how often (in seconds) the eureka client needs to send heartbeats to\n eureka server to indicate that it is still alive. If the heartbeats are not\n received for the period specified in leaseExpirationDurationInSeconds, eureka\n server will remove the instance from its view, there by disallowing traffic to this\n instance.\n\n Note that the instance could still not take traffic if it implements\n HealthCheckCallback and then decides to make itself unavailable. 
#

eureka.instance.preferIpAddress=true
